// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  BUYER
  SELLER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role
  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  bids          Bid[]
  following     Listing[] @relation("ListingFollowers")
  invitations   Listing[] @relation("ListingInvitees")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BiddingStatus {
  CLOSED
  OPEN
  PAUSED
  UPCOMING
}

enum BidStatus {
  ACCEPTED
  PENDING
  REJECTED
  REVOKED
}

enum ListingAccessibility {
  PRIVATE
  PUBLIC
}

enum ListingActivity {
  ACTIVE
  INACTIVE
}

model Listing {
  id            String               @id @default(cuid())
  accessibility ListingAccessibility @default(PUBLIC)
  activity      ListingActivity      @default(INACTIVE)
  address       String
  image         String?
  askingPrice   Decimal?             @db.Money
  biddingEnds   DateTime?
  biddingStarts DateTime?
  city          String
  slug          String               @unique
  reservePrice  Decimal?             @db.Money
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  zipcode       String
  followers     User[]               @relation("ListingFollowers")
  invitees      User[]               @relation("ListingInvitees")
  bids          Bid[]                @relation("ListingBids")
  userId        String
  user          User                 @relation(fields: [userId], references: [id])
}

model Bid {
  id        String    @id @default(cuid())
  amount    Decimal   @db.Money
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  listing   Listing   @relation("ListingBids", fields: [listingId], references: [id])
  listingId String
  status    BidStatus @default(PENDING)
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}
